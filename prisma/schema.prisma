// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Role {
  user // Not 'registered' in VikeLabs yet
  member // Registered
  lead // Controls Projects, can add / remove technology (cannot remove technology that a project is using, cannot add existing technology. can add custom technology)
  admin // Can edit pretty much everything within bounds of safety.
}

model User {
  id          String  @id @default(cuid())
  vId         String
  username    String  @unique
  displayName String? @default("")
  firstName   String  @default("")
  lastName    String  @default("")
  github      String? @default("")
  discord     String? @default("")
  imageUrl    String? @default("")
  role        Role    @default(member)
  // notifications Json

  projects  ProjectHasMembers[]
  isLeadFor ProjectHasLead?
}

// model UserInfo {} for draft/live user info

model Project {
  id      Int          @id @default(autoincrement())
  order   Int
  liveId  String?      @unique
  live    ProjectInfo? @relation("live", fields: [liveId], references: [id])
  draftId String?      @unique
  draft   ProjectInfo? @relation("draft", fields: [draftId], references: [id])

  leadBy  ProjectHasLead?
  members ProjectHasMembers[]
}

enum Status {
  saved
  savedReview
  submitted
  rejected
  approved
}

model ProjectInfo {
  id            String    @id @default(cuid())
  status        Status    @default(savedReview)
  title         String
  recruiting    Boolean
  recruitingFor Json
  description   String
  stack         Json
  links         Json
  imageUrls     Json
  members       Json
  updatedBy     String?
  updatedAt     DateTime? @updatedAt
  managedBy     String?
  managedAt     DateTime?
  managerMemo   String?

  projectAsDraft Project? @relation("draft")
  projectAsLive  Project? @relation("live")
}

// Users and Projects are Many-to-Many, so we need a relation table (JOIN / pivot table)
model ProjectHasMembers {
  project    Project @relation(fields: [projectId], references: [id])
  projectId  Int
  member     User    @relation(fields: [memberId], references: [id])
  memberId   String
  isCredited Boolean @default(false)
  role       String?

  @@id([projectId, memberId])
}

model ProjectHasLead {
  project    Project @relation(fields: [projectId], references: [id])
  projectId  Int     @unique
  lead       User    @relation(fields: [leadId], references: [id])
  leadId     String  @unique // assuming project can only have one lead at any given time
  isCredited Boolean @default(false) // Enabled = info appears on the project page credits list

  @@id([projectId, leadId])
}
