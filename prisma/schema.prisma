// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id          String              @id @default(cuid())
  vId         String
  username    String              @unique
  displayName String              @default("")
  firstName   String              @default("")
  lastName    String              @default("")
  github      String              @default("")
  discord     String              @default("")
  imageUrl    String              @default("")
  role        String
  projects    ProjectHasMembers[]
  isLeadFor   ProjectHasLead?
}

// model UserInfo {} for draft/live user info

model Project {
  id      Int                 @id @default(autoincrement())
  leadBy  ProjectHasLead?
  members ProjectHasMembers[]
  draftId String?             @unique
  draft   ProjectInfo?        @relation("draft", fields: [draftId], references: [id])
  liveId  String?             @unique
  live    ProjectInfo?        @relation("live", fields: [liveId], references: [id])
  // TODO: order
}

model ProjectInfo {
  id              String    @id @default(cuid())
  projectAsDraft  Project?  @relation("draft")
  projectAsLive   Project?  @relation("live")
  title           String
  description     String // very long HTML string
  links           Json
  stack           Json
  imageUrls       Json
  recruiting      Boolean
  recruitingFor   Json
  members         Json // Order of all members, [{id, role}]
  updatedBy       String // username
  updatedAt       DateTime  @default(now())
  approvedBy      String?
  approvedAt      DateTime?
  requireApproval Boolean   @default(true)
}

// Users and Projects are Many-to-Many, so we need a relation table (JOIN / pivot table)
model ProjectHasMembers {
  project    Project @relation(fields: [projectId], references: [id])
  projectId  Int
  member     User    @relation(fields: [memberId], references: [id])
  memberId   String
  isCredited Boolean @default(false)
  // role       String?

  // role   String @default("")
  // assignedAt    DateTime     @default(now())
  // assignedBy    String
  // isCredited    Boolean      @default(false) // Enabled = info appears on the project page credits list
  // isTeamLead    Boolean      @default(false)
  @@id([projectId, memberId])
}

model ProjectHasLead {
  project    Project @relation(fields: [projectId], references: [id])
  projectId  Int     @unique
  lead       User    @relation(fields: [leadId], references: [id])
  leadId     String  @unique // assuming project can only have one lead at any given time
  isCredited Boolean @default(false) // Enabled = info appears on the project page credits list

  @@id([projectId, leadId])
}

model Technology {
  id        String @id @default(cuid())
  name      String
  bgColor   String
  color     String
  createdBy String @default("")
}

enum Role {
  USER // Not 'registered' in VikeLabs yet
  MEMBER // Registered
  LEAD // Controls Projects, can add / remove technology (cannot remove technology that a project is using, cannot add existing technology. can add custom technology)
  ADMIN // Can edit pretty much everything within bounds of safety.
}
